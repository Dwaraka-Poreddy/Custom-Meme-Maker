{"version":3,"sources":["../node_modules/react-canvas-js/dist sync","EditableText.js","App.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","useStylesVerticalDividors","makeStyles","theme","paper","margin","width","color","display","border","borderRadius","shape","spacing","divider","background","box","height","zIndex","backgroundColor","StyledToggleButtonGroup","withStyles","grouped","ToggleButtonGroup","EditableInput","props","classesVerticalDividors","inputRef","useRef","useState","inputVisible","setInputVisible","text","setText","isMousedOver","setMouseOver","VD","setVD","isbold","SetIsBold","isItalic","SetIsItalic","isUnderLine","SetIsUnderLine","formats","setFormats","parseInt","fSize","incfont","SetIncFont","React","setColor","angle","setAngle","transform","a","console","log","onClickOutSide","current","contains","target","useEffect","document","addEventListener","removeEventListener","Fragment","style","fontWeight","fontStyle","textDecoration","fontSize","hex","ref","Grid","container","alignItems","className","root","Paper","elevation","size","value","onChange","event","newFormats","handleFormat","aria-label","ToggleButton","onClick","Divider","flexItem","orientation","handleIncFont","initialValue","placement","autoAdjust","position","class","type","Number","placeholder","InputBase","multiline","variant","onMouseOver","onMouseOut","resizestyle","useGridStyles","flexGrow","padding","textAlign","palette","secondary","App","images","setImages","setPlusimage","activeImage","setActiveImage","isMemeGenerated","setIsMemeGenerated","textelement","settextelement","imageElement","setImageElement","prevElements","fetch","then","res","json","catch","err","error","imgData","data","memes","image","Math","floor","random","length","url","backgroundImage","marginTop","maxWidth","overflow","item","xs","sm","src","alt","map","index","top","EditableText","defaultSize","fetchImage","htmlFor","name","accept","window","URL","createObjectURL","files","hidden","addtextelement","el","canvas","getElementById","html2canvas","domtoimage","toBlob","base64image","saveAs","handleMemeDownlod","rootElement","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.5eaa460c.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 82;","import React, { useState, useRef, useEffect } from \"react\";\r\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\r\nimport ZoomInIcon from \"@material-ui/icons/ZoomIn\";\r\nimport ZoomOutIcon from \"@material-ui/icons/ZoomOut\";\r\nimport FormatBoldIcon from \"@material-ui/icons/FormatBold\";\r\nimport FormatItalicIcon from \"@material-ui/icons/FormatItalic\";\r\nimport FormatUnderlinedIcon from \"@material-ui/icons/FormatUnderlined\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\r\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport InputBase from \"@material-ui/core/InputBase\";\r\nimport InputColor from \"react-input-color\";\r\n// import Pricing from \"./sections/PricingTemplate\";\r\n\r\n// import TextField from \"@material-ui/core/TextField\";\r\n\r\n// const useStylesVerticalDividors = makeStyles((theme) => ({\r\n//   root: {\r\n//     margin: \"0 auto\",\r\n//     width: \"fit-content\",\r\n//     color: \"inherit\",\r\n//     backgroundColor: \"inherit\",\r\n//     borderColor: \"inherit\",\r\n//     border: `1px solid ${theme.palette.divider}`,\r\n//     borderRadius: theme.shape.borderRadius,\r\n//     // backgroundColor: theme.palette.background.paper,\r\n//     // color: theme.palette.text.secondary,\r\n//     \"& svg\": {\r\n//       margin: theme.spacing(0.0)\r\n//     },\r\n//     \"& hr\": {\r\n//       margin: theme.spacing(0, 0)\r\n//     }\r\n//   }\r\n// }));\r\nconst useStylesVerticalDividors = makeStyles((theme) => ({\r\n  paper: {\r\n    margin: \"0 auto\",\r\n    width: \"fit-content\",\r\n    color: \"inherit\",\r\n    // backgroundColor: \"inherit\",\r\n    // backgroundColor: theme.palette.background.paper,\r\n    // borderColor: \"inherit\",\r\n    // WebkitTextFillColor:\"red\",\r\n    display: \"flex\",\r\n\r\n    border: `3px solid `,\r\n    borderRadius: theme.shape.borderRadius,\r\n    \"& svg\": {\r\n      margin: theme.spacing(0.0)\r\n    },\r\n    \"& hr\": {\r\n      margin: theme.spacing(0, 0)\r\n    }\r\n  },\r\n  divider: {\r\n    margin: theme.spacing(0),\r\n    background: \"currentColor\"\r\n  },\r\n  box: {\r\n    height: \"200px\",\r\n    width: \"200px\",\r\n    background:\r\n      \"linear-gradient(to right, red,orange,yellow,green,blue,indigo,violet)\",\r\n    // \"linear-gradient(to bottom, #000066 0%, #ff6666 100%)\",\r\n    zIndex: 9999,\r\n    // \"linear-gradient(rgba(250,0,0,0.5),transparent)\",\r\n\r\n    backgroundColor: \"red\" /*this your primary color*/\r\n  }\r\n}));\r\n\r\nconst StyledToggleButtonGroup = withStyles((theme) => ({\r\n  grouped: {\r\n    margin: theme.spacing(0),\r\n    border: \"none\",\r\n    \"&:not(:first-child)\": {\r\n      borderRadius: theme.shape.borderRadius\r\n    },\r\n    \"&:first-child\": {\r\n      borderRadius: theme.shape.borderRadius\r\n    }\r\n  }\r\n}))(ToggleButtonGroup);\r\n\r\nconst EditableInput = (props) => {\r\n  // We use hooks to declare \"initial\" states\r\n  const classesVerticalDividors = useStylesVerticalDividors();\r\n  const inputRef = useRef(null);\r\n  const [inputVisible, setInputVisible] = useState(false);\r\n  const [text, setText] = useState(props.text);\r\n  const [isMousedOver, setMouseOver] = useState(false);\r\n  const [VD, setVD] = useState(false);\r\n  const [isbold, SetIsBold] = useState(false);\r\n  const [isItalic, SetIsItalic] = useState(false);\r\n  const [isUnderLine, SetIsUnderLine] = useState(false);\r\n  const [formats, setFormats] = useState(\"\");\r\n  const [incfont, SetIncFont] = useState(parseInt(props.fSize, 10));\r\n  const [color, setColor] = React.useState({});\r\n  const [angle, setAngle] = useState(\"0\");\r\n\r\n  // const [isEditable, setEditable] = useState(true);\r\n\r\n  const transform = `rotate(${-angle}deg)`;\r\n\r\n  function handleMouseOver() {\r\n    setMouseOver(true);\r\n  }\r\n\r\n  function handleMouseOut() {\r\n    setMouseOver(false);\r\n  }\r\n\r\n  function handleClick() {\r\n    // if (isEditable === true) {\r\n    //   setInputVisible(true);\r\n    //   setVD(true);\r\n    // } else {\r\n    setInputVisible(true);\r\n    setVD(true);\r\n    // }\r\n  }\r\n\r\n  function handleFormat(event, newFormats) {\r\n    setFormats(newFormats);\r\n  }\r\n\r\n  function HandleBold() {\r\n    SetIsBold(!isbold);\r\n  }\r\n  function HandleItalic() {\r\n    SetIsItalic(!isItalic);\r\n  }\r\n  function HandleUnderLine() {\r\n    SetIsUnderLine(!isUnderLine);\r\n  }\r\n\r\n  async function handleIncFont() {\r\n    console.log(\"inc\");\r\n    await SetIncFont(incfont + 1);\r\n    console.log(incfont);\r\n  }\r\n\r\n  function handleDecFont() {\r\n    console.log(\"dec\");\r\n    SetIncFont(incfont - 1);\r\n    console.log(incfont);\r\n  }\r\n\r\n  function onClickOutSide(e) {\r\n    // Check if user is clicking outside of <input>\r\n    if (\r\n      inputRef.current &&\r\n      // toggleLayerProps.isOpen &&\r\n      !inputRef.current.contains(e.target)\r\n    ) {\r\n      setInputVisible(false);\r\n      setMouseOver(false);\r\n      setVD(false);\r\n      // Disable text input\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    // Handle outside clicks on mounted state\r\n    if (inputVisible) {\r\n      document.addEventListener(\"mousedown\", onClickOutSide);\r\n    }\r\n\r\n    // This is a necessary step to \"dismount\" unnecessary events when we destroy the component\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", onClickOutSide);\r\n    };\r\n  });\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <section\r\n        style={{\r\n          fontWeight: isbold ? \"bold\" : \"normal\",\r\n          fontStyle: isItalic ? \"italic\" : \"normal\",\r\n          textDecoration: isUnderLine ? \"underline\" : \"none\",\r\n          fontSize: incfont + \"px\",\r\n          transform,\r\n          color: color.hex\r\n        }}\r\n      >\r\n        <section ref={inputRef}>\r\n          {VD === true ? (\r\n            <span>\r\n              <Grid\r\n                container\r\n                alignItems=\"center\"\r\n                className={classesVerticalDividors.root}\r\n              >\r\n                <Paper elevation={0} className={classesVerticalDividors.paper}>\r\n                  <StyledToggleButtonGroup\r\n                    size=\"small\"\r\n                    value={formats}\r\n                    onChange={(event, newFormats) =>\r\n                      handleFormat(event, newFormats)\r\n                    }\r\n                    aria-label=\"text formatting\"\r\n                  >\r\n                    <ToggleButton\r\n                      value=\"bold\"\r\n                      aria-label=\"bold\"\r\n                      onClick={() => HandleBold()}\r\n                    >\r\n                      <FormatBoldIcon />\r\n                    </ToggleButton>\r\n                    <ToggleButton\r\n                      value=\"italic\"\r\n                      aria-label=\"italic\"\r\n                      onClick={() => HandleItalic()}\r\n                    >\r\n                      <FormatItalicIcon />\r\n                    </ToggleButton>\r\n                    <ToggleButton\r\n                      value=\"underlined\"\r\n                      aria-label=\"underlined\"\r\n                      onClick={() => HandleUnderLine()}\r\n                    >\r\n                      <FormatUnderlinedIcon />\r\n                    </ToggleButton>\r\n                    <Divider\r\n                      flexItem\r\n                      orientation=\"vertical\"\r\n                      className={classesVerticalDividors.divider}\r\n                    />\r\n                  </StyledToggleButtonGroup>\r\n                  <ToggleButton\r\n                    style={{ border: \"none\" }}\r\n                    value=\"incfont\"\r\n                    aria-label=\"underlined\"\r\n                    onClick={() => handleIncFont()}\r\n                  >\r\n                    <ZoomInIcon />\r\n                  </ToggleButton>\r\n                  <ToggleButton\r\n                    style={{ border: \"none\" }}\r\n                    value=\"incfont\"\r\n                    aria-label=\"underlined\"\r\n                    onClick={() => handleDecFont()}\r\n                  >\r\n                    <ZoomOutIcon />\r\n                  </ToggleButton>\r\n                  <Divider\r\n                    flexItem\r\n                    orientation=\"vertical\"\r\n                    className={classesVerticalDividors.divider}\r\n                  />\r\n\r\n                  <InputColor\r\n                    className={classesVerticalDividors.box}\r\n                    initialValue=\"null\"\r\n                    onChange={setColor}\r\n                    placement=\"right\"\r\n                    autoAdjust=\"true\"\r\n                    style={{\r\n                      zIndex: 9999,\r\n                      margin: \"auto\",\r\n                      display: \"flex\",\r\n                      position: \"relative\",\r\n                      height: \"30px\"\r\n                    }}\r\n                  />\r\n                  <Divider\r\n                    flexItem\r\n                    orientation=\"vertical\"\r\n                    className={classesVerticalDividors.divider}\r\n                  />\r\n                  <input\r\n                    class=\"number-wrapper\"\r\n                    style={{ width: \"40px\", border: \"none\", color: \"inherit\" }}\r\n                    type=\"number\"\r\n                    value={angle}\r\n                    onChange={(e) => {\r\n                      if (e.target) {\r\n                        setAngle(Number(e.target.value));\r\n                        console.log(e.target.value);\r\n                        console.log(Number(e.target.value));\r\n                        console.log({ angle });\r\n                      }\r\n                    }}\r\n                    placeholder=\"angle\"\r\n                  />\r\n                </Paper>\r\n              </Grid>\r\n            </span>\r\n          ) : null}\r\n\r\n          {inputVisible ? (\r\n            <InputBase\r\n              multiline\r\n              variant=\"outlined\"\r\n              size=\"medium\"\r\n              style={{\r\n                fontSize: \"inherit\",\r\n                backgroundColor: \"inherit\",\r\n                color: \"inherit\",\r\n                border: \"0.001px solid \",\r\n                borderRadius: \"5px\"\r\n              }}\r\n              value={text}\r\n              onChange={(e) => {\r\n                setText(e.target.value);\r\n              }}\r\n            />\r\n          ) : (\r\n            <span\r\n              style={{\r\n                border: isMousedOver ? \"1.25px dashed \" : null\r\n              }}\r\n              onMouseOver={() => handleMouseOver()}\r\n              onMouseOut={() => handleMouseOut()}\r\n              onClick={() => handleClick()}\r\n            >\r\n              {text}\r\n            </span>\r\n          )}\r\n        </section>\r\n      </section>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default EditableInput;\r\n","import React, { useState, useRef, useEffect, Fragment } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport \"./styles.css\";\r\nimport EditableText from \"./EditableText\";\r\n//image related imports\r\nimport Canvas from \"react-canvas-js\";\r\nimport domtoimage from \"dom-to-image-more\";\r\nimport html2canvas from \"html2canvas\";\r\nimport { saveAs } from \"file-saver\";\r\n//draggable text\r\nimport Draggable from \"react-draggable\";\r\nimport { Resizable } from \"re-resizable\";\r\n\r\nimport InputBase from \"@material-ui/core/InputBase\";\r\n\r\nconst resizestyle = {\r\n  // display: \"flex\",\r\n  // alignItems: \"center\",\r\n  // justifyContent: \"center\",\r\n  // border: \"solid 5px \",\r\n  background: \"transparent\",\r\n  width: \"200px\",\r\n};\r\n\r\nconst useGridStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: \"center\",\r\n    color: theme.palette.text.secondary,\r\n  },\r\n}));\r\n\r\nexport default function App() {\r\n  const gridclasses = useGridStyles();\r\n\r\n  const [images, setImages] = React.useState([]);\r\n  const [plusimage, setPlusimage] = React.useState(\"false\");\r\n  const [activeImage, setActiveImage] = React.useState(\r\n    \"https://i.imgflip.com/1iruch.jpg\"\r\n  );\r\n  const [isMemeGenerated, setIsMemeGenerated] = React.useState(false);\r\n  const [textelement, settextelement] = useState([\r\n    \"Copying others Meme\",\r\n    \"Creating your own meme\",\r\n  ]);\r\n  const [imageElement, setImageElement] = React.useState([]);\r\n  //addText starts here\r\n  const inputRef = useRef(null);\r\n  const [inputVisible, setInputVisible] = useState(false);\r\n  const [text, setText] = useState(\"\");\r\n  const [isMousedOver, setMouseOver] = useState(false);\r\n\r\n  function handleAddText() {\r\n    setInputVisible(true);\r\n  }\r\n\r\n  function handleSaveText() {\r\n    setInputVisible(false);\r\n    addtextelement(text);\r\n  }\r\n\r\n  async function addtextelement(e) {\r\n    settextelement((prevElements) => {\r\n      return [...prevElements, e];\r\n    });\r\n    await setText(\"\");\r\n  }\r\n\r\n  function addSecimage(e) {\r\n    setImageElement((prevElements) => {\r\n      return [...prevElements, e];\r\n    });\r\n    console.log(imageElement, \"hello\");\r\n  }\r\n\r\n  // changing image\r\n  function handleImageChange() {\r\n    setIsMemeGenerated(false);\r\n    fetchImage();\r\n  }\r\n\r\n  function handleGenerateMeme() {\r\n    setIsMemeGenerated(true);\r\n  }\r\n\r\n  //downloading image\r\n  function handleMemeDownlod(el) {\r\n    var canvas = document.getElementById(\"mnode\");\r\n    html2canvas(canvas).then(function (canvas) {\r\n      domtoimage\r\n        .toBlob(document.getElementById(\"mnode\"))\r\n        .then(function (base64image) {\r\n          window.saveAs(base64image, \"my-node.png\");\r\n        });\r\n    });\r\n  }\r\n\r\n  //using local images\r\n  function handleImageInputChange(event) {\r\n    setIsMemeGenerated(false);\r\n    setActiveImage(window.URL.createObjectURL(event.target.files[0]));\r\n  }\r\n\r\n  function handleSecImageInputChange(event) {\r\n    setPlusimage(true);\r\n    addSecimage(window.URL.createObjectURL(event.target.files[0]));\r\n  }\r\n\r\n  // Fetch images using API\r\n  async function fetchImage() {\r\n    const imgData = await fetch(\"https://api.imgflip.com/get_memes\")\r\n      .then((res) => res.json())\r\n      .catch((err) => console.error(err));\r\n    const { memes } = await imgData.data;\r\n    await setImages(memes);\r\n    const image = images[Math.floor(Math.random() * images.length)];\r\n    await setActiveImage(image.url);\r\n  }\r\n  //...\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        backgroundImage:\r\n          \"url(https://i.ibb.co/60yWjTy/imageedit-1-9188751214.png)\",\r\n      }}\r\n      className=\"App\"\r\n    >\r\n      <div>\r\n        <h1\r\n          style={{\r\n            backgroundColor: \"#48cfe4\",\r\n            padding: \"20px \",\r\n            marginTop: \"0\",\r\n            fontSize: \"2em\",\r\n          }}\r\n        >\r\n          Meme Generator\r\n        </h1>\r\n        <h2>Stop COPYING, Start CREATING!</h2>\r\n      </div>\r\n      <Grid\r\n        style={{ maxWidth: \"80vw\", margin: \"auto\", overflow: \"hidden\" }}\r\n        container\r\n        spacing={2}\r\n      >\r\n        <Grid\r\n          style={{\r\n            border: \"2px solid\",\r\n            borderRadius: \"10px\",\r\n            backgroundColor: \"white\",\r\n            overflow: \"hidden\",\r\n          }}\r\n          item\r\n          xs={12}\r\n          sm={6}\r\n        >\r\n          <br /> <br />\r\n          <div id=\"mnode\">\r\n            <div\r\n              style={{\r\n                width: \"100%\",\r\n                maxWidth: \"38vw\",\r\n                // content: \"url(\" + activeImage + \")\"\r\n              }}\r\n              className=\"content\"\r\n            >\r\n              <img\r\n                style={{\r\n                  // margin: \"0 auto\",\r\n                  maxWidth: \"38vw\",\r\n                }}\r\n                src={activeImage}\r\n                alt=\"0\"\r\n              />\r\n            </div>\r\n            <div\r\n              className=\"content\"\r\n              style={{ maxWidth: \"38vw\" }}\r\n              // style={{\r\n              //   // zIndex: \"-1\",\r\n              //   maxWidth: \"40vw\",\r\n              //   marginLeft: \"auto\",\r\n              //   marginRight: \"auto\",\r\n              //   marginTop: \"0\",\r\n              //   marginBottom: \"0\",\r\n              //   // textAlign: \"center\",\r\n              //   border: \"2px solid currentColor\",\r\n              //   backgroundImage: \"url(\" + activeImage + \")\",\r\n              //   backgroundRepeat: \"no-repeat\",\r\n              //   backgroundSize: \"contain\",\r\n              //   backgroundPosition: \"center\"\r\n              //   // backgroundSize: \"contain\"\r\n              //   // backgroundSize: \"100%\"\r\n              //   // backgroundPosition: \"100% 100%\"\r\n              //   // border: \"10px solid red\"\r\n              // }}\r\n            >\r\n              {textelement.map((item, index) => {\r\n                return (\r\n                  <Draggable style={{ width: 200, zIndex: 9999 }}>\r\n                    <p\r\n                      style={{\r\n                        maxWidth: \"38vw\",\r\n                        position: \"absolute\",\r\n                        top: (index + 1) * 25 + 200,\r\n                        zIndex: index + 1000,\r\n                      }}\r\n                    >\r\n                      <EditableText text={item} fSize=\"24\" />\r\n                      {/* {item} */}\r\n                    </p>\r\n                  </Draggable>\r\n                );\r\n              })}\r\n              {imageElement.map((item, index) => {\r\n                return (\r\n                  <Draggable>\r\n                    <span\r\n                      style={{\r\n                        position: \"absolute\",\r\n                        top: (index + 1) * 15,\r\n                        height: \"auto\",\r\n                        background: \"transparent\",\r\n                        zIndex: index + 10,\r\n                      }}\r\n                    >\r\n                      <Resizable style={resizestyle} defaultSize={{}}>\r\n                        <img\r\n                          class=\"secondaryImage\"\r\n                          style={{ width: \"inherit\", height: \"auto\" }}\r\n                          src={item}\r\n                          alt={index}\r\n                        />\r\n                      </Resizable>\r\n                    </span>\r\n                  </Draggable>\r\n                );\r\n                // <h2>{item}</h2>;\r\n              })}\r\n              {/* <img style={{ opacity: \"0\" }} src={activeImage} alt=\"Meme\" /> */}\r\n            </div>\r\n          </div>\r\n        </Grid>\r\n\r\n        <Grid\r\n          style={{\r\n            border: \"2px solid\",\r\n            borderRadius: \"10px\",\r\n            backgroundColor: \"white\",\r\n          }}\r\n          item\r\n          xs={12}\r\n          sm={6}\r\n        >\r\n          <br /> <br />\r\n          <React.Fragment>\r\n            <div className=\"form__btns\">\r\n              <Grid style={{ margin: \"auto\" }} item xs={12} sm={6}>\r\n                <br /> <br />\r\n                <button\r\n                  className=\"btn btn-primary\"\r\n                  type=\"button\"\r\n                  onClick={handleImageChange}\r\n                >\r\n                  Go to Next Image\r\n                </button>\r\n              </Grid>\r\n\r\n              <Grid style={{ margin: \"auto\" }} item xs={12} sm={6}>\r\n                <br /> <br />\r\n                <label className=\"btn btn-primary\" htmlFor=\"fileInput\">\r\n                  Add &nbsp; Local &nbsp; Images\r\n                  <input\r\n                    id=\"fileInput\"\r\n                    name=\"fileInput\"\r\n                    type=\"file\"\r\n                    accept=\".jpg, .jpeg, .png\"\r\n                    onChange={handleImageInputChange}\r\n                    hidden\r\n                  />\r\n                </label>\r\n              </Grid>\r\n\r\n              <Grid style={{ margin: \"auto\" }} item xs={12} sm={6}>\r\n                <br /> <br />\r\n                {inputVisible ? (\r\n                  <button\r\n                    className=\"btn btn-success form__btns form \"\r\n                    type=\"button\"\r\n                    onClick={handleSaveText}\r\n                  >\r\n                    Done\r\n                  </button>\r\n                ) : (\r\n                  <button\r\n                    className=\"btn btn-info form__btns form \"\r\n                    type=\"button\"\r\n                    onClick={handleAddText}\r\n                  >\r\n                    Add Meme Text\r\n                  </button>\r\n                )}\r\n              </Grid>\r\n\r\n              <Grid style={{ margin: \"auto\" }} item xs={6} sm={6}>\r\n                <br />\r\n                <br />\r\n\r\n                <div>\r\n                  <div ref={inputRef}>\r\n                    {inputVisible ? (\r\n                      <InputBase\r\n                        multiline\r\n                        variant=\"outlined\"\r\n                        size=\"medium\"\r\n                        style={{\r\n                          fontSize: \"16\",\r\n                          backgroundColor: \"inherit\",\r\n                          color: \"inherit\",\r\n                          border: \"0.001px solid \",\r\n                          borderRadius: \"5px\",\r\n                          width: \"80%\",\r\n                          height: \"45px\",\r\n                        }}\r\n                        value={text}\r\n                        onChange={(e) => {\r\n                          setText(e.target.value);\r\n                        }}\r\n                      />\r\n                    ) : (\r\n                      <span\r\n                        style={{\r\n                          border: isMousedOver ? \"1.25px dashed \" : null,\r\n                        }}\r\n                        onMouseOver={() => setMouseOver(true)}\r\n                        onMouseOut={() => setMouseOver(false)}\r\n                        onClick={() => {\r\n                          setInputVisible(true);\r\n                        }}\r\n                      >\r\n                        {/* {text} */}\r\n                      </span>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </Grid>\r\n\r\n              <Grid style={{ margin: \"auto\" }} item xs={12} sm={6}>\r\n                <br /> <br />\r\n                <label className=\"btn btn-info\" htmlFor=\"fileInput1\">\r\n                  Add Secondary Image\r\n                  <input\r\n                    id=\"fileInput1\"\r\n                    name=\"fileInput\"\r\n                    type=\"file\"\r\n                    accept=\".jpg, .jpeg, .png\"\r\n                    onChange={handleSecImageInputChange}\r\n                    hidden\r\n                  />\r\n                </label>\r\n              </Grid>\r\n\r\n              <Grid style={{ margin: \"auto\" }} item xs={12} sm={6}>\r\n                <br /> <br />\r\n                {isMemeGenerated ? (\r\n                  <button\r\n                    className=\"btn btn-success form__btns form \"\r\n                    type=\"button\"\r\n                    onClick={() => handleMemeDownlod(this)}\r\n                    id=\"foo\"\r\n                  >\r\n                    Download Meme\r\n                  </button>\r\n                ) : (\r\n                  <button\r\n                    className=\"btn btn-success form__btns form \"\r\n                    type=\"button\"\r\n                    onClick={handleGenerateMeme}\r\n                  >\r\n                    Generate Meme\r\n                  </button>\r\n                )}\r\n              </Grid>\r\n            </div>\r\n          </React.Fragment>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  rootElement\r\n);\r\n"],"sourceRoot":""}